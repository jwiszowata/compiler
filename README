*** Szczegóły kompilacji i uruchamiania programu:

make zrobiony w korzeniu projektu kompiluje wszystkie zamieszczone pliki i tworzy 
kompilator latc_x86. Po ruchomieniu latc_x86 z plikiem .lat tworzony jest kod 
asemblerowy x86 w składni nasmowej. Zapisywany jest on do pliku .s, 
który następnie przy pomocy gcc jest kompilowany do pliku wykonywalnego.

*** Używane narzędzia i biblioteki:

-> język: haskell
-> biblioteki: System.Environment
               System.IO
               System.FilePath.Posix
               System.Cmd
               System.Exit
   do uruchamiania bashowych poleceń

-> parser: bnfc

*** Zaimplementowane rozszerzenia: 
-> tablice
-> struktury
-> obiekty - struktury z metodami, nie ma dziedziczenia itp

-> optymalizacja użycia stosu i skoków

*** Struktura katalogów projektu:

--> README
--> Makefile
--> \src
        --> Main.hs             (łączy bnfc z backendem i komiluje asma do pliku wykonywalnego)
        --> Compiler.hs         (część główna kodu)
        --> DataAndTypes.hs     (typy danych)
        --> DefaultFunctions.hs (funkcje domyślne, printInt itp.)
        --> Errors.hs           (funkcje dla błędów)
        --> ExprCompilation.hs  (kompilacja wyrażeń)
        --> Utils.hs            (funkcje pomocnicze)
        --> Optimize.hs         (funkcje optymalizujące)
        --> Latte.cf            (gramatyka w bnfc)
    

*** Ewentualnie odnośniki do bardziej szczegółowej dokumentacji: brak
