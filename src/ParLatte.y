-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParLatte where
import AbsLatte
import LexLatte
import ErrM

}

%name pProgram Program

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '!' { PT _ (TS _ 1) }
 '!=' { PT _ (TS _ 2) }
 '%' { PT _ (TS _ 3) }
 '&&' { PT _ (TS _ 4) }
 '(' { PT _ (TS _ 5) }
 ')' { PT _ (TS _ 6) }
 ')null' { PT _ (TS _ 7) }
 '*' { PT _ (TS _ 8) }
 '+' { PT _ (TS _ 9) }
 '++' { PT _ (TS _ 10) }
 ',' { PT _ (TS _ 11) }
 '-' { PT _ (TS _ 12) }
 '--' { PT _ (TS _ 13) }
 '.' { PT _ (TS _ 14) }
 '/' { PT _ (TS _ 15) }
 ':' { PT _ (TS _ 16) }
 ';' { PT _ (TS _ 17) }
 '<' { PT _ (TS _ 18) }
 '<=' { PT _ (TS _ 19) }
 '=' { PT _ (TS _ 20) }
 '==' { PT _ (TS _ 21) }
 '>' { PT _ (TS _ 22) }
 '>=' { PT _ (TS _ 23) }
 '[' { PT _ (TS _ 24) }
 '[]' { PT _ (TS _ 25) }
 ']' { PT _ (TS _ 26) }
 'boolean' { PT _ (TS _ 27) }
 'class' { PT _ (TS _ 28) }
 'else' { PT _ (TS _ 29) }
 'false' { PT _ (TS _ 30) }
 'for' { PT _ (TS _ 31) }
 'if' { PT _ (TS _ 32) }
 'int' { PT _ (TS _ 33) }
 'new' { PT _ (TS _ 34) }
 'return' { PT _ (TS _ 35) }
 'string' { PT _ (TS _ 36) }
 'true' { PT _ (TS _ 37) }
 'void' { PT _ (TS _ 38) }
 'while' { PT _ (TS _ 39) }
 '{' { PT _ (TS _ 40) }
 '||' { PT _ (TS _ 41) }
 '}' { PT _ (TS _ 42) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ListTopDef { Program $1 } 


FunDef :: { FunDef }
FunDef : Type Ident '(' ListArg ')' Block { FunDef $1 $2 $4 $6 } 


TopDef :: { TopDef }
TopDef : FunDef { FnDef $1 } 
  | 'class' Type '{' ListAtt '}' { StDef $2 (reverse $4) }


ListTopDef :: { [TopDef] }
ListTopDef : TopDef { (:[]) $1 } 
  | TopDef ListTopDef { (:) $1 $2 }


Arg :: { Arg }
Arg : Type Ident { Arg $1 $2 } 


ListArg :: { [Arg] }
ListArg : {- empty -} { [] } 
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }


Att :: { Att }
Att : Type Ident ';' { Att $1 $2 } 
  | FunDef { Meth $1 }


ListAtt :: { [Att] }
ListAtt : {- empty -} { [] } 
  | ListAtt Att { flip (:) $1 $2 }


New :: { New }
New : 'new' Type '[' Expr ']' { NewArr $2 $4 } 
  | 'new' Type { NewSt $2 }


Assignable :: { Assignable }
Assignable : Ident { AIdent $1 } 
  | Ident '[' Expr ']' { AArr $1 $3 }
  | Ident '(' ListExpr ')' { AMeth $1 $3 }


Assign :: { Assign }
Assign : ListAssignable { AList $1 } 
  | '(' New ')' '.' ListAssignable { ANewDot $2 $5 }
  | '(' New ')' '[' Expr ']' { ANewArr $2 $5 }


ListAssignable :: { [Assignable] }
ListAssignable : Assignable { (:[]) $1 } 
  | Assignable '.' ListAssignable { (:) $1 $3 }


Block :: { Block }
Block : '{' ListStmt '}' { Block (reverse $2) } 


ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } 
  | ListStmt Stmt { flip (:) $1 $2 }


Stmt :: { Stmt }
Stmt : ';' { Empty } 
  | Block { BStmt $1 }
  | Type ListItem ';' { Decl $1 $2 }
  | Assign '=' Expr ';' { Ass $1 $3 }
  | Assign '++' ';' { Incr $1 }
  | Assign '--' ';' { Decr $1 }
  | 'return' Expr ';' { Ret $2 }
  | 'return' ';' { VRet }
  | 'if' '(' Expr ')' Stmt { Cond $3 $5 }
  | 'if' '(' Expr ')' Stmt 'else' Stmt { CondElse $3 $5 $7 }
  | 'while' '(' Expr ')' Stmt { While $3 $5 }
  | Expr ';' { SExp $1 }
  | 'for' '(' Type Ident ':' Expr6 ')' Stmt { For $3 $4 $6 $8 }


Item :: { Item }
Item : Ident { NoInit $1 } 
  | Ident '=' Expr { Init $1 $3 }


ListItem :: { [Item] }
ListItem : Item { (:[]) $1 } 
  | Item ',' ListItem { (:) $1 $3 }


Type :: { Type }
Type : 'int' { Int } 
  | 'string' { Str }
  | 'boolean' { Bool }
  | 'void' { Void }
  | Type '[]' { Array $1 }
  | Ident { Clas $1 }


ListType :: { [Type] }
ListType : {- empty -} { [] } 
  | Type { (:[]) $1 }
  | Type ',' ListType { (:) $1 $3 }


Expr6 :: { Expr }
Expr6 : Assign { EVar $1 } 
  | Integer { ELitInt $1 }
  | 'true' { ELitTrue }
  | 'false' { ELitFalse }
  | String { EString $1 }
  | '(' Type ')null' { ECast $2 }
  | New { ENew $1 }
  | '(' Expr ')' { $2 }


Expr5 :: { Expr }
Expr5 : '-' Expr6 { Neg $2 } 
  | '!' Expr6 { Not $2 }
  | Expr6 { $1 }


Expr4 :: { Expr }
Expr4 : Expr4 MulOp Expr5 { EMul $1 $2 $3 } 
  | Expr5 { $1 }


Expr3 :: { Expr }
Expr3 : Expr3 AddOp Expr4 { EAdd $1 $2 $3 } 
  | Expr4 { $1 }


Expr2 :: { Expr }
Expr2 : Expr2 RelOp Expr3 { ERel $1 $2 $3 } 
  | Expr3 { $1 }


Expr1 :: { Expr }
Expr1 : Expr2 '&&' Expr1 { EAnd $1 $3 } 
  | Expr2 { $1 }


Expr :: { Expr }
Expr : Expr1 '||' Expr { EOr $1 $3 } 
  | Expr1 { $1 }


ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] } 
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }


AddOp :: { AddOp }
AddOp : '+' { Plus } 
  | '-' { Minus }


MulOp :: { MulOp }
MulOp : '*' { Times } 
  | '/' { Div }
  | '%' { Mod }


RelOp :: { RelOp }
RelOp : '<' { LTH } 
  | '<=' { LE }
  | '>' { GTH }
  | '>=' { GE }
  | '==' { EQU }
  | '!=' { NE }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

